# Script for testing the convective term:

import sys
sys.path.insert(0, '../Mesh')
sys.path.insert(0, '../Laplace')

import time

# Numpy and Scipy:
import numpy as np
import scipy.linalg as la

# Own modules:
import laplace_functions as lp
import structured_grids as sg
import quadrature_nodes as qn
import gordon_hall as gh
import convection_functions as cf

# For plotting:
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt

# Defining loading function
def f1(x,y):
    return 0

def f2(x,y):
    return 0

# Defining initial values
def v1(x,y):
    return 1.

v1 = np.vectorize(v1)

def v2(x,y):
    return 0.

v2 = np.vectorize(v2)

# Defining Diffusion constant
mu = 0.01


#####################################
####### Generating mesh #############
N = 30
N_tot = N**2
xis = qn.GLL_points(N)
weights = qn.GLL_weights(N, xis)

X, Y = np.meshgrid(xis,xis)
#####################################

t1 = time.time()
# Get lagrangian derivative matrix:
print "Getting derivative matrix..."
D = sg.diff_matrix(xis, N)

# Get Jacobian and total G-matrix:
print "Getting Jacobian and G-matrices."
Jac, G_tot = lp.assemble_total_G_matrix(np.dot(X,D),
                                        np.dot(X.T,D),
                                        np.dot(Y,D),
                                        np.dot(Y.T,D),
                                        N,
                                        N)
  
#########################################################
##################### ASSEMBLY ##########################
#########################################################

# initial conditions
U1 = v1(X,Y).ravel()
U2 = v2(X,Y).ravel()

# Now we're closing in on some shit. Prepare to ASSEMBLE!
# Assemble stiffness matrix:
print "Assembling stiffness matrix."
A = lp.assemble_local_stiffness_matrix(D, G_tot, N, weights)

# Assemble constant convection matrix
Cc1,Cc2= cf.assemble_const_convection_matrix(np.dot(X,D), np.dot(X.T,D), np.dot(Y,D), np.dot(Y.T,D), D, N, weights)
C1,C2 = cf.update_convection_matrix(U1,U2,Cc1,Cc2,N_tot)

# Assemble loading vector:
print "Assembling loading vector."
F1 = lp.assemble_loading_vector(X, Y, f1, Jac, weights)
F2 = lp.assemble_loading_vector(X, Y, f2, Jac, weights)


# Defining S - Matrix
S1 = C1 + mu*Aa, S2 = C2 + mu*A

print A.shape
print "Imposing boundary conditions."
# Now we need to handle the Dirichlet Boundary conditions:
for i in range(N):
    #Lower side:
    S[i,:] = 0. , S[i,i] = 1. , F[i] = 0.

    #Upper side:
    S[N*(N-1)+i,:] = 0.
    S[N*(N-1)+i, N*(N-1)+i] = 1.
    F[N*(N-1)+i] = 0.

    #Left side:
    S[i*N,:] = 0.
    S[i*N, i*N] = 1.
    F[i*N] = 1.

    #Right side:
    S[i*N+N-1,:] = 0.
    S[i*N+N-1, i*N+N-1] =1.
    F[i*N+N-1] = 1.

########################
#   SOLVING ITERATIVELY
########################
eps = 0.001
error = 1
counter = 1
N_it = 10
U = la.solve(S, F)
while (error>eps and counter <= N_it):
  print "Solving for the", counter ,"th time" 
  C1,C2 = cf.update_convection_matrix(U,U2,Cc1,Cc2,N_tot)
  S = C1 + mu*A
  for i in range(N):
      #Lower side:
      S[i,:] = 0.
      S[i,i] = 1.
      F[i] = 0.

      #Upper side:
      S[N*(N-1)+i,:] = 0.
      S[N*(N-1)+i, N*(N-1)+i] = 1.
      F[N*(N-1)+i] = 0.

      #Left side:
      S[i*N,:] = 0.
      S[i*N, i*N] = 1.
      F[i*N] = 1.

      #Right side:
      S[i*N+N-1,:] = 0.
      S[i*N+N-1, i*N+N-1] =1.
      F[i*N+N-1] = 1.
  Unew = la.solve(S, F)
  error = float(la.norm(Unew-U))/la.norm(U)
  print "error for the", counter,"th iteration:" , error
  U = Unew
  counter += 1


#   TIME TO SOLVE:
####################
print "Done solving..."
U = np.reshape ( U, (N,N) )

t2 = time.time()-t1
print "Total time: ", t2

############################
# PLOTTING THE SHIT:
############################
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_wireframe(X, Y, U)#-np.sin(2*np.pi*(X**2 + Y**2)))

plt.show()
